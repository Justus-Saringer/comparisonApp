<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="app_name">Compose Comparison</string>
    <string name="compose_constraint">
        val (text, button) = createRefs()\n\n

        Text(\n
        \t\t\t    text = "This is a text",\n
        \t\t\t    modifier = Modifier.constrainAs(text) {\n
        \t\t\t\t\t\t        linkTo(\n
        \t\t\t\t\t\t            parent.start,\n
        \t\t\t\t\t\t            parent.end,\n
        \t\t\t\t\t\t            parent.top\n
        \t\t\t\t\t\t\t\t\t                )\n
        \t\t\t\t\t\t            }\n
        \t\t\t        )\n
        \n
        Button(\n
        \t\t\t    modifier = Modifier.constrainAs(button)\n
        ) {\n
        \t\t\t\t\t\t        bottom.linkTo(parent.bottom)\n
        \t\t\t\t\t\t        start.linkTo(parent.start)\n
        \t\t\t    }\n
        \t\t\t    onClick = { }\n
        ) { Text( \"Hello World\" )
    </string>
    <string name="view_constraint">
        &lt;?xml version="1.0" encoding="utf-8"?&gt;\n
        &lt;androidx.constraintlayout.widget.ConstraintLayout\n
        \t\t\tandroid:layout_width="match_parent"\n
        \t\t\tandroid:layout_height="match_parent"&gt;\n
        \n
        &lt;TextView\n
        \t\t\tandroid:id="@+id/textview"\n
        \t\t\tandroid:text="this is a text"\n
        \t\t\tapp:layout_constraintEnd_toEndOf="parent"\n
        \t\t\tapp:layout_constraintStart_toStartOf="parent"\n
        \t\t\tapp:layout_constraintTop_toTopOf="parent"&gt;\n
        \n
        &lt;Button\n
        \t\t\tandroid:id="@+id/button"\n
        \t\t\tandroid:text="this is a text"\n
        \t\t\tapp:layout_constraintBottom_toBottomOf="parent"\n
        \t\t\tapp:layout_constraintStart_toStartOf="parent"&gt;
    </string>

    <string name="view_linear">
        &lt;?xml version="1.0" encoding="utf-8"?&gt;\n
        &lt;LinearLayout\n
        \t\t\tandroid:layout_width="match_parent"\n
        \t\t\tandroid:layout_height="match_parent"\n
        \t\t\tandroid:layout_gravity="center"\n
        \t\t\tandroid:orientation="vertical"&gt;\n
        \n
        \t\t\t Here are your other elements\n
        \n
        &lt;/LinearLayout&gt;
    </string>
    <string name="compose_linear">
        Column(\n
            \t\t\tmodifier = modifier\n
        ) {\n
            \t\t\tHere are your Composables\n
        }\n
        \n
        OR\n
        \n
        Row(\n
            \t\t\tmodifier = modifier\n
        ) {\n
            \t\t\tHere are your Composables\n
        }
    </string>

    <string name="view_frame">
        &lt;android:layout_width="match_parent"\n
        \t\t\tandroid:layout_height="match_parent"&gt;\n
            \n
        \t\t\tHere are your other elements\n
        \n
        &lt;/FrameLayout&gt;
    </string>
    <string name="compose_frame">
        Box( ) {\n
        \t\t\tHere are your composables\n
        }
    </string>

    <string name="view_grid">
        &lt;GridLayout\n
        \t\t\tandroid:layout_width="wrap_content"\n
        \t\t\tandroid:layout_height="wrap_content"\n
        \t\t\tandroid:columnCount="2"\n
        \t\t\tandroid:rowCount="2"&gt;\n
            \n
        \t\t\tHere are your elements\n
            \n
        &lt;/GridLayout&gt;
    </string>
    <string name="compose_grid">
    LazyVerticalGrid(\n
        \t\t\tcells = GridCells.Fixed(2)\n
    ) {\n
        \t\t\tHere are your other composables\n
    }
    </string>

    <string name="view_button">
    &lt;Button\n
        \t\t\tandroid:layout_width="wrap_content"\n
        \t\t\tandroid:layout_height="wrap_content"\n
        \t\t\tandroid:text="This is a text"/&gt;
    </string>
    <string name="compose_button">
        Button(onClick = {  }) {\n
        \t\t\tText(text = "This is a text")\n
        }
    </string>

    <string name="view_text">
        &lt;TextView\n
            android:layout_width="wrap_content"\n
            android:layout_height="wrap_content"\n
            android:background="@color/red_200"\n
            android:text="This is just a TextView"/&gt;
    </string>
    <string name="compose_text">
        Text(\n
        \t\t\tmodifier = Modifier.background(Red200),\n
        \t\t\ttext = "This is text"\n
        )
    </string>

    <string name="view_textfield">
        &lt;com.google.android.material.textfield.TextInputEditText\n
        \t\t\tandroid:layout_width="wrap_content"\n
        \t\t\tandroid:layout_height="wrap_content"\n
        \t\t\tandroid:text="This is a text"/&gt;
    </string>
    <string name="compose_textfield">
        var text by remember { mutableStateOf("This is a text") }\n
        \n
        TextField(\n
            \t\t\tvalue = text,\n
            \t\t\tonValueChange = { text = it }\n
        )
    </string>

    <string name="view_toggle">
            &lt;ToggleButton\n
                \t\t\tandroid:layout_width="wrap_content"\n
                \t\t\tandroid:layout_height="wrap_content"/>
    </string>
    <string name="compose_toggle">
    var buttonClicked by remember {\n
        \t\t\tmutableStateOf(false)\n
    }\n
    \n
    val buttonText: String\n
    val buttonTextColor: Color\n
    val buttonBackgroundColor: Color\n
    \n
    if (buttonClicked) {\n
        \t\t\tbuttonText = "On"\n
        \t\t\tbuttonTextColor = Color.Green\n
        \t\t\tbuttonBackgroundColor = Color.LightGray\n
    } else {\n
        \t\t\tbuttonText = "Off"\n
        \t\t\tbuttonTextColor = Color.Red\n
        \t\t\tbuttonBackgroundColor = Color.Gray\n
    }\n
    \n
    Button(\n
        \t\t\tonClick = { buttonClicked = !buttonClicked },\n
        \t\t\tcolors = ButtonDefaults.buttonColors(backgroundColor = buttonBackgroundColor)\n
    ) {\n
        \t\t\tText(text = buttonText, color = buttonTextColor)\n
    }
    </string>

    <string name="view_radio">
         &lt;RadioGroup\n
            \t\t\tandroid:layout_width="match_parent"\n
            \t\t\tandroid:layout_height="wrap_content"\n
            \t\t\tapp:layout_constrainedWidth="false">\n
\n
         \t\t\t&lt;RadioButton\n
            \t\t\t\t\t\tandroid:layout_width="match_parent"\n
            \t\t\t\t\t\tandroid:layout_height="wrap_content"\n
            \t\t\t\t\t\tandroid:text="First Radio Button" />\n
\n
         \t\t\t&lt;RadioButton\n
            \t\t\t\t\t\tandroid:layout_width="match_parent"\n
            \t\t\t\t\t\tandroid:layout_height="wrap_content"\n
            \t\t\t\t\t\tandroid:text="Second Radio Button" />\n
\n
     &lt;/RadioGroup>
    </string>
    <string name="compose_radio">
     var selectedItem by remember { mutableStateOf("") }\n
\n
    Column(\n
        \t\t\tmodifier = Modifier.fillMaxSize(),\n
        \t\t\tverticalArrangement = Arrangement.Center,\n
        \t\t\thorizontalAlignment = Alignment.CenterHorizontally\n
    ) {\n
\n
        \t\t\tstringList.forEach { item ->\n
\n
            \t\t\t\t\t\tval localInteractionSource = remember{ MutableInteractionSource()}\n
\n
            \t\t\t\t\t\tRow(\n
                \t\t\t\t\t\t\t\t\tverticalAlignment = Alignment.CenterVertically,\n
                \t\t\t\t\t\t\t\t\tmodifier = Modifier\n
                    \t\t\t\t\t\t\t\t\t\t\t\t.fillMaxWidth()\n
                    \t\t\t\t\t\t\t\t\t\t\t\t.padding(horizontal = 16.dp)\n
                    \t\t\t\t\t\t\t\t\t\t\t\t.clickable(\n
                        \t\t\t\t\t\t\t\t\t\t\t\t\t\t\tinteractionSource = localInteractionSource,\n
                        \t\t\t\t\t\t\t\t\t\t\t\t\t\t\tindication = null\n
                    \t\t\t\t\t\t\t\t\t\t\t\t) {\n
                        \t\t\t\t\t\t\t\t\t\t\t\t\t\t\tselectedItem = item\n
                    \t\t\t\t\t\t\t\t\t\t\t\t}\n
            \t\t\t\t\t\t) {\n
                \t\t\t\t\t\t\t\t\tRadioButton(\n
                    \t\t\t\t\t\t\t\t\t\t\t\tselected = selectedItem == item,\n
                    \t\t\t\t\t\t\t\t\t\t\t\tonClick = {\n
                        \t\t\t\t\t\t\t\t\t\t\t\t\t\t\tselectedItem = item\n
                    \t\t\t\t\t\t\t\t\t\t\t\t},\n
                    \t\t\t\t\t\t\t\t\t\t\t\tinteractionSource = localInteractionSource\n
                \t\t\t\t\t\t\t\t\t)\n
                \t\t\t\t\t\t\t\t\tText(\n
                    \t\t\t\t\t\t\t\t\t\t\t\ttext = item\n
                \t\t\t\t\t\t\t\t\t)\n
            \t\t\t\t\t\t}\n
        \t\t\t}\n
    }
    </string>
    <string name="compose_recycler">
    Column( ) {\n
        \t\t\tfor (i in 1 .. 5) {\n
            \t\t\t\t\t\tButton(onClick = { }) {\n
                \t\t\t\t\t\t\t\t\tText(text = "$i. Button")\n
            \t\t\t\t\t\t}\n
        \t\t\t}\n
    }
    </string>

    <string name="view_toolbar">
    // XML Code\n
        &lt;androidx.appcompat.widget.Toolbar\n
            \t\t\tandroid:id="@+id/toolbar_example"\n
            \t\t\tandroid:layout_width="match_parent"\n
            \t\t\tandroid:layout_height="?attr/actionBarSize"\n
            \t\t\tandroid:background="@color/davys_grey"\n
            \t\t\tapp:layout_constraintEnd_toEndOf="parent"\n
            \t\t\tapp:layout_constraintStart_toStartOf="parent"\n
            \t\t\tapp:layout_constraintTop_toTopOf="parent"\n
            \t\t\tapp:navigationIcon="@drawable/abc_vector_test"\n
            \t\t\tapp:title="FrameLayout"\n
            \t\t\tapp:titleTextColor="@color/alice_blue">\n
        \n
        &lt;ImageButton\n
            \t\t\tandroid:layout_width="wrap_content"\n
            \t\t\tandroid:layout_height="wrap_content"\n
            \t\t\tandroid:layout_gravity="end"\n
            \t\t\tandroid:background="@null"\n
            \t\t\tandroid:layout_marginEnd="16dp"\n
            \t\t\tandroid:src="@drawable/ic_baseline_favorite_24"\n
            \t\t\tapp:tint="@color/white" />\n
        \n
    &lt;/androidx.appcompat.widget.Toolbar>\n
        \n
    // Code\n
    binding?.toolbarExample?.setNavigationOnClickListener {\n
        \t\t\tonBackPressed()\n
    }
    </string>
    <string name="compose_toolbar">
    setContent {\n
        \t\t\tComposeTestingTheme {\n
            \t\t\t\t\t\tScaffold(\n
                \t\t\t\t\t\t\t\t\ttopBar = {\n
                    \t\t\t\t\t\t\t\t\t\t\t\tTopAppBar(\n
                        \t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttitle = {\n
                            \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tText(text = "Toolbar")\n
                        \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n
                        \t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbackgroundColor = MaterialTheme.colors.primary,\n
                        \t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnavigationIcon = {\n
                            \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIconButton(\n
                                \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick = { onBackPressed() }\n
                            \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t) {\n
                                \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIcon(\n
                                    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\timageVector = Icons.Default.ArrowBack,\n
                                    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcontentDescription = null\n
                                \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n
                            \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n
                        \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n
                        \t\t\t\t\t\t\t\t\t\t\t\t\t\t\tactions = {\n
                            \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIconButton(\n
                                \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick = { }\n
                            \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t) {\n
                                \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIcon(\n
                                    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\timageVector = Icons.Default.Favorite,\n
                                    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcontentDescription = null\n
                                \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n
                            \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n
                        \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n
                    \t\t\t\t\t\t\t\t\t\t\t\t)\n
                \t\t\t\t\t\t\t\t\t},\n
                \t\t\t\t\t\t\t\t\tcontent = {\n
        \n
                \t\t\t\t\t\t\t\t\t}\n
            \t\t\t\t\t\t)\n
        \t\t\t}\n
    }
    </string>

    <string name="customView">
        This is quite complex!\n
        Please look into the source code.
    </string>

</resources>